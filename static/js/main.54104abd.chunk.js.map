{"version":3,"sources":["models/theme.model.ts","utils/theme.utils.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ITheme","changeTheme","type","document","documentElement","setAttribute","App","useState","light","activeTheme","setActiveTheme","onInitialRender","useCallback","id","phase","actualDuration","baseDuration","startTime","commitTime","interactions","toggleTheme","dark","onRender","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"0JAAYA,E,iDAAAA,K,cAAAA,E,aAAAA,M,KCEL,IAAMC,EAAc,SAACC,EAAcD,GACxCA,EAAYC,GACZC,SAASC,gBAAgBC,aAAa,aAAcH,I,OCyCvCI,EAzCO,WAAO,IAAD,EAEYC,mBAAiBP,EAAOQ,OAFpC,mBAEnBC,EAFmB,KAENC,EAFM,KAIpBC,EAAkBC,uBACtB,SACEC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEc,UAAVL,GACFX,SAASC,gBAAgBC,aAAa,aAAc,WAGxD,IAGIe,EAAcR,uBAAY,WAC9B,OAAOH,GACL,KAAKT,EAAOQ,MACVP,EAAYD,EAAOqB,KAAMX,GACzB,MACF,KAAKV,EAAOqB,KACVpB,EAAYD,EAAOQ,MAAOE,MAG7B,CAACD,IAEJ,OACE,eAAC,WAAD,CAAUI,GAAG,MAAMS,SAAUX,EAA7B,UACE,qDACA,wDACA,wBAAQY,QAASH,EAAjB,8BC1BSI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,YCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhC,SAASiC,eAAe,SAM1BZ,M","file":"static/js/main.54104abd.chunk.js","sourcesContent":["export enum ITheme {\r\n  light = \"light\",\r\n  dark = \"dark\"\r\n}","import { ITheme } from \"../models/theme.model\";\r\n\r\nexport const changeTheme = (type: ITheme, changeTheme: React.Dispatch<React.SetStateAction<ITheme>>) => {\r\n  changeTheme(type);\r\n  document.documentElement.setAttribute(\"data-theme\", type);\r\n};","import React, { Profiler, useCallback, useState } from \"react\";\nimport { ITheme } from \"./models/theme.model\";\nimport { changeTheme } from \"./utils/theme.utils\";\n\nconst App: React.FC = () => {\n\n  const [activeTheme, setActiveTheme] = useState<ITheme>(ITheme.light);\n\n  const onInitialRender = useCallback(\n    (\n      id?: string,\n      phase?: \"mount\" | \"update\",\n      actualDuration?: number,\n      baseDuration?: number,\n      startTime?: number,\n      commitTime?: number,\n      interactions?: any\n    ) => {\n      if (phase === \"mount\") {\n        document.documentElement.setAttribute(\"data-theme\", \"light\");\n      }\n    },\n    []\n  );\n\n  const toggleTheme = useCallback(() => {\n    switch(activeTheme) {\n      case ITheme.light: \n        changeTheme(ITheme.dark, setActiveTheme)\n        break;\n      case ITheme.dark:\n        changeTheme(ITheme.light, setActiveTheme)\n        break;\n    }\n  }, [activeTheme])\n\n  return (\n    <Profiler id=\"App\" onRender={onInitialRender}>\n      <h1>HTML Avatar Creator</h1>\n      <p>This is an English text</p>\n      <button onClick={toggleTheme}>Toggle theme</button>\n    </Profiler>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.scss';\nimport './styles/theme.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}