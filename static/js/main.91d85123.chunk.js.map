{"version":3,"sources":["components/Header/Header.tsx","components/Logo/Logo.tsx","components/MainContainer/MainContainer.tsx","components/Navigation/NavigationToggle/NavigationToggle.tsx","components/Navigation/NavigationListItem/NavigationListItem.tsx","components/Navigation/NavigationList/NavigationList.tsx","components/Navigation/Navigation.tsx","components/Playground/Playground.tsx","i18n.ts","models/theme.model.ts","utils/theme.utils.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","className","Logo","MainContainer","props","style","children","isNavOpen","classNames","cs","NavigationToggle","isOpen","handleNavToggle","onClick","NavigationListItem","name","icon","NavigationList","navItems","navListClassName","map","item","i","Navigation","Playground","lngs","en","nativeName","de","it","i18n","use","Backend","LanguageDetector","initReactI18next","init","debug","fallbackLng","interpolation","escapeValue","backend","loadPath","process","ns","defaultNS","react","useSuspense","wait","ITheme","changeTheme","type","document","documentElement","setAttribute","App","useTranslation","t","useState","setIsNavOpen","light","activeTheme","setActiveTheme","navigationItems","onInitialRender","useCallback","id","phase","actualDuration","baseDuration","startTime","commitTime","interactions","toggleTheme","dark","handleOnToggleClick","onRender","Object","keys","lng","fontWeight","language","changeLanguage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","fallback","getElementById"],"mappings":"6WAiBeA,EATmB,WAEhC,OAAO,yBAAQC,UAAU,aAAlB,UACL,wCACA,cAAC,EAAD,IACA,+CCIWC,G,MAZe,WAC5B,OACE,sBAAKD,UAAU,WAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,qBAAKA,UAAU,mBAEjB,qBAAKA,UAAU,kBACf,qBAAKA,UAAU,uB,wBCcNE,EAViC,SAAAC,GAAU,IAChDH,EAA0CG,EAA1CH,UAAWI,EAA+BD,EAA/BC,MAAOC,EAAwBF,EAAxBE,SAAUC,EAAcH,EAAdG,UAE9BC,EAAaC,IAAG,qBAAsBR,EAAW,CACrD,cAAeM,IAGjB,OAAO,qBAAKN,UAAWO,EAAYH,MAAOA,EAAnC,SAA2CC,KCHrCI,G,MAZuC,SAACN,GAAW,IACxDO,EAA4BP,EAA5BO,OAAQC,EAAoBR,EAApBQ,gBAEVJ,EAAaC,IAAG,oBAAqBE,GAAU,YAErD,OACE,wBAAQV,UAAWO,EAAYK,QAASD,EAAxC,SACE,qBAAKX,UAAU,aCDNa,EAX2C,SAACV,GAAW,IAC5DW,EAAeX,EAAfW,KAAMC,EAASZ,EAATY,KAEd,OACE,sBAAKf,UAAU,uBAAf,UACGe,EACD,+BAAOD,QCYEE,G,MAdmC,SAACb,GAAW,IACpDO,EAAqBP,EAArBO,OAAQO,EAAad,EAAbc,SAEVC,EAAmBV,IAAG,kBAAmB,CAC7C,cAAeE,IAGjB,OACE,oBAAIV,UAAWkB,EAAf,SACGD,EAASE,KAAI,SAACC,EAA2BC,GAA5B,OAA0C,cAAC,EAAD,CAA4BP,KAAMM,EAAKN,KAAMC,KAAMK,EAAKL,MAA/BM,UCIxEC,G,MAX2B,SAACnB,GAAW,IAC5CO,EAAuCP,EAAvCO,OAAQO,EAA+Bd,EAA/Bc,SAAWN,EAAoBR,EAApBQ,gBAE3B,OACE,sBAAKX,UAAU,uBAAf,UACE,cAAC,EAAD,CAAkBU,OAAQA,EAAQC,gBAAiBA,IACnD,cAAC,EAAD,CAAgBD,OAAQA,EAAQO,SAAUA,SCGjCM,G,MANkC,SAAApB,GAAU,IACjDE,EAAaF,EAAbE,SAER,OAAO,qBAAKL,UAAU,sBAAf,SAAsCK,M,+BCNlCmB,EAAmC,CAC9CC,GAAI,CAAEC,WAAY,WAClBC,GAAI,CAAED,WAAY,WAClBE,GAAI,CAAEF,WAAY,aAGpBG,IAEGC,IAAIC,KAEJD,IAAIE,KAEJF,IAAIG,KAEJC,KAAK,CACJC,OAAO,EACPC,YAAa,KACbC,cAAe,CACbC,aAAa,GAEfC,QAAS,CACPC,SAAS,GAAD,OAAKC,uBAAL,iCAEVC,GAAI,CAAC,eACLC,UAAW,cACXC,MAAO,CACLC,aAAa,EACbC,MAAM,KAIGjB,ICxCHkB,EDwCGlB,EAAf,G,SCxCYkB,K,cAAAA,E,aAAAA,M,KCEL,IAAMC,EAAc,SAACC,EAAcD,GACxCA,EAAYC,GACZC,SAASC,gBAAgBC,aAAa,aAAcH,IC2GvCI,EAvGO,WAAO,IAAD,EACNC,cAAZC,EADkB,EAClBA,EAAG1B,EADe,EACfA,KADe,EAGQ2B,oBAAkB,GAH1B,mBAGnBlD,EAHmB,KAGRmD,EAHQ,OAIYD,mBAAiBT,EAAOW,OAJpC,mBAInBC,EAJmB,KAINC,EAJM,KAMpBC,EAAyC,CAC7C,CAEE9C,KAAM,6BACND,KAAMyC,EAAE,oBAEV,CAEExC,KAAM,6BACND,KAAMyC,EAAE,oBAEV,CAEExC,KAAM,6BACND,KAAMyC,EAAE,oBAEV,CACExC,KAAM,6BACND,KAAMyC,EAAE,oBAEV,CACExC,KAAM,6BACND,KAAMyC,EAAE,qBAEV,CACExC,KAAM,6BACND,KAAMyC,EAAE,oBAEV,CACExC,KAAM,6BACND,KAAMyC,EAAE,4BAINO,EAAkBC,uBACtB,SACEC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEc,UAAVL,GACFf,SAASC,gBAAgBC,aAAa,aAAc,WAGxD,IAMImB,EAAcR,uBAAY,WAC9B,OAAQJ,GACN,KAAKZ,EAAOW,MACVV,EAAYD,EAAOyB,KAAMZ,GACzB,MACF,KAAKb,EAAOyB,KACVxB,EAAYD,EAAOW,MAAOE,MAG7B,CAACD,IAKEc,EAAsBV,uBAAY,WAC1BN,GAAZnD,KACC,CAACA,IAEJ,OACE,eAAC,WAAD,CAAU0D,GAAG,MAAMU,SAAUZ,EAA7B,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAY7C,SAAU4C,EAAiBnD,OAAQJ,EAAWK,gBAAiB8D,IAC3E,cAAC,EAAD,CAAenE,UAAWA,EAA1B,SACE,cAAC,EAAD,uBAIF,4BAAIiD,EAAE,UACN,wBAAQ3C,QAAS2D,EAAjB,0BACCI,OAAOC,KAAKpD,GAAML,KAAI,SAAC0D,GAAD,OACrB,wBAEEzE,MAAO,CAAE0E,WAAYjD,EAAKkD,WAAaF,EAAM,OAAS,UACtD5B,KAAK,SACLrC,QAAS,kBAAMiB,EAAKmD,eAAeH,IAJrC,SAMGrD,EAAKqD,GAAKnD,YALNmD,UCrFAI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,YCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,WAAD,CAAUC,SAAU,oBAApB,SACE,cAAC,EAAD,QAGJ3C,SAAS4C,eAAe,SAM1Bb,M","file":"static/js/main.91d85123.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Logo } from '..';\r\nimport './Header.scss';\r\n\r\ninterface IHeader {\r\n\r\n}\r\n\r\nconst Header: React.FC<IHeader> = () => {\r\n\r\n  return <header className=\"hac-header\">\r\n    <span>HTML</span>\r\n    <Logo />\r\n    <span>Creator</span>\r\n  </header>\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport './Logo.scss';\r\n\r\ninterface ILogo {}\r\n\r\nconst Logo: React.FC<ILogo> = () => {\r\n  return (\r\n    <div className=\"hac-logo\">\r\n      <div className=\"hac-logo-head\">\r\n        <div className=\"hac-logo-eye\" />\r\n      </div>\r\n      <div className=\"hac-logo-neck\" />\r\n      <div className=\"hac-logo-body\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Logo;\r\n","import React from 'react';\r\nimport './MainContainer.scss';\r\nimport { IHasClassname, IHasStyles } from './../../models/common.model';\r\nimport cs from 'classnames';\r\n\r\ninterface IMainContainer extends IHasClassname, IHasStyles {\r\n  /**\r\n   * A flag indicating if the navbar is open\r\n   */\r\n   isNavOpen: boolean;\r\n}\r\n\r\n/**\r\n * The Main Component to display the playground in which the avatar can be changed\r\n * @param props \r\n */\r\nconst MainContainer: React.FC<IMainContainer> = props => {\r\n  const { className, style, children, isNavOpen } = props;\r\n\r\n  const classNames = cs(\"hac-main-container\", className, {\r\n    '--isnavopen': isNavOpen,\r\n  });\r\n\r\n  return <div className={classNames} style={style}>{children}</div>;\r\n}\r\n\r\nexport default MainContainer;","import React from \"react\";\r\nimport cs from \"classnames\";\r\nimport { INavigationToggle } from \"../navigation.model\";\r\nimport \"./NavigationToggle.scss\";\r\n\r\n/**\r\n * The NavigationToggle component is used to toggle the Navigation state beetween open/close\r\n */\r\nconst NavigationToggle: React.FC<INavigationToggle> = (props) => {\r\n  const { isOpen, handleNavToggle } = props;\r\n\r\n  const classNames = cs(\"navigation-toggle\", isOpen && \"--isopen\");\r\n\r\n  return (\r\n    <button className={classNames} onClick={handleNavToggle}>\r\n      <div className=\"line\" />\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default NavigationToggle;\r\n","import React from \"react\";\r\nimport { INavigationListItem } from \"../navigation.model\";\r\n\r\nconst NavigationListItem: React.FC<INavigationListItem> = (props) => {\r\n  const { name, icon } = props;\r\n\r\n  return (\r\n    <div className=\"navigation-list-item\">\r\n      {icon}\r\n      <span>{name}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavigationListItem;\r\n","import React from \"react\";\r\nimport cs from 'classnames';\r\nimport NavigationListItem from \"../NavigationListItem/NavigationListItem\";\r\nimport { INavigationList } from \"../navigation.model\";\r\nimport { INavigationListItem } from \"./../navigation.model\";\r\nimport './NavigationList.scss';\r\n\r\nconst NavigationList: React.FC<INavigationList> = (props) => {\r\n  const { isOpen, navItems } = props;\r\n\r\n  const navListClassName = cs(\"navigation-list\", {\r\n    \"--isnavopen\": isOpen,\r\n  })\r\n\r\n  return (\r\n    <ul className={navListClassName}>\r\n      {navItems.map((item: INavigationListItem, i: number) => <NavigationListItem key={i} name={item.name} icon={item.icon} />)}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default NavigationList;\r\n","import React from \"react\";\r\nimport NavigationToggle from \"./NavigationToggle/NavigationToggle\";\r\nimport NavigationList from \"./NavigationList/NavigationList\";\r\nimport { INavigation } from \"./navigation.model\";\r\nimport './Navigation.scss';\r\n\r\n/**\r\n * The Navigation component is used to switch/jump between the skin parts.\r\n */\r\nconst Navigation: React.FC<INavigation> = (props) => {\r\n  const { isOpen, navItems,  handleNavToggle } = props;\r\n\r\n  return (\r\n    <div className=\"navigation-container\">\r\n      <NavigationToggle isOpen={isOpen} handleNavToggle={handleNavToggle} />\r\n      <NavigationList isOpen={isOpen} navItems={navItems} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\nimport { IHasClassname, IHasStyles } from \"../../models/common.model\";\r\nimport './Playground.scss';\r\n\r\ninterface IPlayGround extends IHasClassname, IHasStyles {\r\n\r\n}\r\n\r\n/**\r\n * The playground used to interact with the generated avatar\r\n * @param props\r\n */\r\nexport const Playground: React.FC<IPlayGround> = props => {\r\n  const { children } = props;\r\n\r\n  return <div className=\"hac-main-playground\">{children}</div>;\r\n}\r\n\r\nexport default Playground;","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\nimport Backend from 'i18next-http-backend';\r\n\r\ninterface ILanguage {\r\n  nativeName: string;\r\n}\r\n\r\nexport const lngs: {[key: string]: ILanguage} = {\r\n  en: { nativeName: 'English' },\r\n  de: { nativeName: 'Deutsch' },\r\n  it: { nativeName: 'Italiano' }\r\n};\r\n\r\ni18n\r\n  // loads translations from your server\r\n  .use(Backend)\r\n  // detect user language\r\n  .use(LanguageDetector)\r\n  // pass the i18n instance to react-i18next.\r\n  .use(initReactI18next)\r\n  // init i18next\r\n  .init({\r\n    debug: true,\r\n    fallbackLng: 'en',\r\n    interpolation: {\r\n      escapeValue: false, // not needed for react as it escapes by default\r\n    },\r\n    backend: {\r\n      loadPath: `${process.env.PUBLIC_URL}/locales/{{lng}}/{{ns}}.json`\r\n    },\r\n    ns: ['translation'],\r\n    defaultNS: 'translation',\r\n    react: {\r\n      useSuspense: true,\r\n      wait: true,\r\n    }\r\n  });\r\n\r\nexport default i18n;","export enum ITheme {\r\n  light = \"light\",\r\n  dark = \"dark\"\r\n}","import { ITheme } from \"../models/theme.model\";\r\n\r\nexport const changeTheme = (type: ITheme, changeTheme: React.Dispatch<React.SetStateAction<ITheme>>) => {\r\n  changeTheme(type);\r\n  document.documentElement.setAttribute(\"data-theme\", type);\r\n};","import React, { Profiler, useCallback, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Header, MainContainer, Playground, Navigation } from \"./components\";\nimport { lngs } from \"./i18n\";\nimport { ITheme } from \"./models/theme.model\";\nimport { changeTheme } from \"./utils/theme.utils\";\nimport { INavigationListItem } from './components/Navigation/navigation.model';\n\nconst App: React.FC = () => {\n  const { t, i18n } = useTranslation();\n\n  const [isNavOpen, setIsNavOpen] = useState<boolean>(false);\n  const [activeTheme, setActiveTheme] = useState<ITheme>(ITheme.light);\n\n  const navigationItems: INavigationListItem[] = [\n    {\n      // Include blush, include neck\n      icon: <></>,\n      name: t(\"body_parts.face\"),\n    },\n    {\n      // Include fringe\n      icon: <></>,\n      name: t(\"body_parts.hair\"),\n    },\n    {\n      // Include eyebrown\n      icon: <></>,\n      name: t(\"body_parts.eyes\"),\n    },\n    {\n      icon: <></>,\n      name: t(\"body_parts.nose\"),\n    },\n    {\n      icon: <></>,\n      name: t(\"body_parts.mouth\"),\n    },\n    {\n      icon: <></>,\n      name: t(\"body_parts.body\"),\n    },\n    {\n      icon: <></>,\n      name: t(\"body_parts.accessories\"),\n    }\n  ]\n\n  const onInitialRender = useCallback(\n    (\n      id?: string,\n      phase?: \"mount\" | \"update\",\n      actualDuration?: number,\n      baseDuration?: number,\n      startTime?: number,\n      commitTime?: number,\n      interactions?: any\n    ) => {\n      if (phase === \"mount\") {\n        document.documentElement.setAttribute(\"data-theme\", \"light\");\n      }\n    },\n    []\n  );\n\n  /**\n   * A method to toggle the Theme beetween light/dark\n   */\n  const toggleTheme = useCallback(() => {\n    switch (activeTheme) {\n      case ITheme.light:\n        changeTheme(ITheme.dark, setActiveTheme);\n        break;\n      case ITheme.dark:\n        changeTheme(ITheme.light, setActiveTheme);\n        break;\n    }\n  }, [activeTheme]);\n\n  /**\n   * A method to toggle the Navigation beetween open/close\n   */\n  const handleOnToggleClick = useCallback(() => {\n    isNavOpen ? setIsNavOpen(false) : setIsNavOpen(true);\n  }, [isNavOpen])\n\n  return (\n    <Profiler id=\"App\" onRender={onInitialRender}>\n      <Header />\n      <Navigation navItems={navigationItems} isOpen={isNavOpen} handleNavToggle={handleOnToggleClick} />\n      <MainContainer isNavOpen={isNavOpen}>\n        <Playground>\n          Avatar\n        </Playground>\n      </MainContainer>\n      <p>{t(\"test\")}</p>\n      <button onClick={toggleTheme}>Toggle theme</button>\n      {Object.keys(lngs).map((lng) => (\n        <button\n          key={lng}\n          style={{ fontWeight: i18n.language === lng ? \"bold\" : \"normal\" }}\n          type=\"submit\"\n          onClick={() => i18n.changeLanguage(lng)}\n        >\n          {lngs[lng].nativeName}\n        </button>\n      ))}\n    </Profiler>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.scss';\nimport './styles/theme.scss';\n\nimport './i18n';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Suspense fallback={\"...app is loading\"}>\n      <App />\n    </Suspense>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}