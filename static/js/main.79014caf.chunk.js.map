{"version":3,"sources":["i18n.ts","models/theme.model.ts","utils/theme.utils.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["lngs","en","nativeName","de","it","i18n","use","Backend","LanguageDetector","initReactI18next","init","debug","fallbackLng","interpolation","escapeValue","backend","loadPath","process","ns","defaultNS","react","useSuspense","wait","ITheme","changeTheme","type","document","documentElement","setAttribute","App","useTranslation","t","useState","light","activeTheme","setActiveTheme","onInitialRender","useCallback","id","phase","actualDuration","baseDuration","startTime","commitTime","interactions","toggleTheme","dark","onRender","onClick","Object","keys","map","lng","style","fontWeight","language","changeLanguage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","fallback","getElementById"],"mappings":"yOASaA,EAAmC,CAC9CC,GAAI,CAAEC,WAAY,WAClBC,GAAI,CAAED,WAAY,WAClBE,GAAI,CAAEF,WAAY,aAGpBG,IAEGC,IAAIC,KAEJD,IAAIE,KAEJF,IAAIG,KAEJC,KAAK,CACJC,OAAO,EACPC,YAAa,KACbC,cAAe,CACbC,aAAa,GAEfC,QAAS,CACPC,SAAS,GAAD,OAAKC,uBAAL,iCAEVC,GAAI,CAAC,eACLC,UAAW,cACXC,MAAO,CACLC,aAAa,EACbC,MAAM,KAIGjB,ICxCHkB,EDwCGlB,EAAf,G,SCxCYkB,K,cAAAA,E,aAAAA,M,KCEL,IAAMC,EAAc,SAACC,EAAcD,GACxCA,EAAYC,GACZC,SAASC,gBAAgBC,aAAa,aAAcH,I,OCsDvCI,EApDO,WAAO,IAAD,EACNC,cAAZC,EADkB,EAClBA,EAAG1B,EADe,EACfA,KADe,EAEY2B,mBAAiBT,EAAOU,OAFpC,mBAEnBC,EAFmB,KAENC,EAFM,OAGUH,mBAAS,GAHnB,mBAKpBI,GALoB,UAKFC,uBACtB,SACEC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEc,UAAVL,GACFb,SAASC,gBAAgBC,aAAa,aAAc,WAGxD,KAGIiB,EAAcR,uBAAY,WAC9B,OAAQH,GACN,KAAKX,EAAOU,MACVT,EAAYD,EAAOuB,KAAMX,GACzB,MACF,KAAKZ,EAAOuB,KACVtB,EAAYD,EAAOU,MAAOE,MAG7B,CAACD,IAEJ,OACE,eAAC,WAAD,CAAUI,GAAG,MAAMS,SAAUX,EAA7B,UACE,qDACA,4BAAIL,EAAE,UACN,wBAAQiB,QAASH,EAAjB,0BACCI,OAAOC,KAAKlD,GAAMmD,KAAI,SAACC,GAAD,OACrB,wBAEEC,MAAO,CAAEC,WAAYjD,EAAKkD,WAAaH,EAAM,OAAS,UACtD3B,KAAK,SACLuB,QAAS,kBAAM3C,EAAKmD,eAAeJ,IAJrC,SAMGpD,EAAKoD,GAAKlD,YALNkD,UChCAK,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,YCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,WAAD,CAAUC,SAAU,oBAApB,SACE,cAAC,EAAD,QAGJ3C,SAAS4C,eAAe,SAM1Bb,M","file":"static/js/main.79014caf.chunk.js","sourcesContent":["import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\nimport Backend from 'i18next-http-backend';\r\n\r\ninterface ILanguage {\r\n  nativeName: string;\r\n}\r\n\r\nexport const lngs: {[key: string]: ILanguage} = {\r\n  en: { nativeName: 'English' },\r\n  de: { nativeName: 'Deutsch' },\r\n  it: { nativeName: 'Italiano' }\r\n};\r\n\r\ni18n\r\n  // loads translations from your server\r\n  .use(Backend)\r\n  // detect user language\r\n  .use(LanguageDetector)\r\n  // pass the i18n instance to react-i18next.\r\n  .use(initReactI18next)\r\n  // init i18next\r\n  .init({\r\n    debug: true,\r\n    fallbackLng: 'en',\r\n    interpolation: {\r\n      escapeValue: false, // not needed for react as it escapes by default\r\n    },\r\n    backend: {\r\n      loadPath: `${process.env.PUBLIC_URL}/locales/{{lng}}/{{ns}}.json`\r\n    },\r\n    ns: ['translation'],\r\n    defaultNS: 'translation',\r\n    react: {\r\n      useSuspense: true,\r\n      wait: true,\r\n    }\r\n  });\r\n\r\nexport default i18n;","export enum ITheme {\r\n  light = \"light\",\r\n  dark = \"dark\"\r\n}","import { ITheme } from \"../models/theme.model\";\r\n\r\nexport const changeTheme = (type: ITheme, changeTheme: React.Dispatch<React.SetStateAction<ITheme>>) => {\r\n  changeTheme(type);\r\n  document.documentElement.setAttribute(\"data-theme\", type);\r\n};","import React, { Profiler, useCallback, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { lngs } from \"./i18n\";\nimport { ITheme } from \"./models/theme.model\";\nimport { changeTheme } from \"./utils/theme.utils\";\n\nconst App: React.FC = () => {\n  const { t, i18n } = useTranslation();\n  const [activeTheme, setActiveTheme] = useState<ITheme>(ITheme.light);\n  const [cheatCount, setCheatCount] = useState(0);\n\n  const onInitialRender = useCallback(\n    (\n      id?: string,\n      phase?: \"mount\" | \"update\",\n      actualDuration?: number,\n      baseDuration?: number,\n      startTime?: number,\n      commitTime?: number,\n      interactions?: any\n    ) => {\n      if (phase === \"mount\") {\n        document.documentElement.setAttribute(\"data-theme\", \"light\");\n      }\n    },\n    []\n  );\n\n  const toggleTheme = useCallback(() => {\n    switch (activeTheme) {\n      case ITheme.light:\n        changeTheme(ITheme.dark, setActiveTheme);\n        break;\n      case ITheme.dark:\n        changeTheme(ITheme.light, setActiveTheme);\n        break;\n    }\n  }, [activeTheme]);\n\n  return (\n    <Profiler id=\"App\" onRender={onInitialRender}>\n      <h1>HTML Avatar Creator</h1>\n      <p>{t(\"test\")}</p>\n      <button onClick={toggleTheme}>Toggle theme</button>\n      {Object.keys(lngs).map((lng) => (\n        <button\n          key={lng}\n          style={{ fontWeight: i18n.language === lng ? \"bold\" : \"normal\" }}\n          type=\"submit\"\n          onClick={() => i18n.changeLanguage(lng)}\n        >\n          {lngs[lng].nativeName}\n        </button>\n      ))}\n    </Profiler>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.scss';\nimport './styles/theme.css';\n\nimport './i18n';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Suspense fallback={\"...app is loading\"}>\n      <App />\n    </Suspense>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}